on:
  - push
  - workflow_dispatch
env:
  GITHUB_USERNAME: ${{ github.actor }}
  GITHUB_PASSWORD: ${{ secrets.PAT }}
  GRADLE_USER_HOME: ./cache
  MVN_CACHE_FOLDER: lib/
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
      - uses: actions/cache@v3
        with:
          path: ./cache
          key: ${{ hashFiles('build.gradle.kts') }}
      - run: ./gradlew --build-cache dependencies
  test-and-build:
    runs-on: ubuntu-latest
    outputs:
      PROJECT_VERSION: ${{ steps.export-env.outputs.PROJECT_VERSION }}
      PROJECT_NAME: ${{ steps.export-env.outputs.PROJECT_NAME }}
      IMAGE_NAME: ${{ steps.export-env.outputs.IMAGE_NAME }}
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
      - uses: actions/cache@v3
        with:
          path: ./cache
          key: ${{ hashFiles('build.gradle.kts') }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      - run: ./gradlew --build-cache dependencies --refresh-dependencies
      - run: ./gradlew spotlessCheck
      - run: ./gradlew test
      - run: ./gradlew bootJar
      - id: export-env
        run: |
          export PROJECT_VERSION=$(./gradlew properties | grep ^version: | awk '{print $2}')
          export PROJECT_NAME=$(./gradlew properties | grep ^name: | awk '{print $2}')
          export ARTIFACT_NAME=$PROJECT_NAME-$PROJECT_VERSION
          echo PROJECT_VERSION=$PROJECT_VERSION | tee -a $GITHUB_OUTPUT $GITHUB_ENV
          echo PROJECT_NAME=$PROJECT_NAME | tee -a $GITHUB_OUTPUT $GITHUB_ENV
          echo IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$PROJECT_NAME:$PROJECT_VERSION | tee -a $GITHUB_OUTPUT $GITHUB_ENV
      - run: docker build -t $IMAGE_NAME .
      - run: docker push $IMAGE_NAME
  deploy_to_ecs:
    runs-on: ubuntu-latest
    needs: test-and-build
    env:
      PROJECT_NAME: ${{ needs.test-and-build.outputs.PROJECT_NAME }}
      PROJECT_VERSION: ${{ needs.test-and-build.outputs.PROJECT_VERSION }}
      IMAGE_NAME: ${{ needs.test-and-build.outputs.IMAGE_NAME }}
      DEPLOYMENT_TYPE: ECS
      CONTAINER_PORT_MAPPINGS: 8761:8761
      NETWORK_MODE: HOST
      EXPORTED_ENVIRONMENTS: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE, SPRING_APPLICATION_NAME,
      CDK_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://${spring.cloud.client.ip-address}:8761/eureka
      CONTAINER_HEALTH_CHECK_CMD: curl http://localhost:8761/actuator/health/ping
      CI_EUREKA_CLIENT_SERVICEURLS: ${{ vars.EUREKA_CLIENT_SERVICEURL_DEFAULTZONE }}
    steps:
      - run: |
          echo "STACK_ID=$PROJECT_NAME-ecsDeploymentStack" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "TASK_FAMILY=$PROJECT_NAME-td" >> $GITHUB_ENV
          echo "SERVICE_NAME=$PROJECT_NAME-svc" >> $GITHUB_ENV
      - run: |
          echo "SPRING_APPLICATION_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          test -n $CI_EUREKA_CLIENT_SERVICEURL && echo EUREKA_CLIENT_SERVICEURL_DEFAULTZONE="$EUREKA_CLIENT_SERVICEURL_DEFAULTZONE, $CI_EUREKA_CLIENT_SERVICEURLS"
      - uses: actions/checkout@v3
        with:
          repository: hoquangnam45/pharmacy-infra
      - uses: ./actions/setup-deployment
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: actions/cache@v3
        with:
          path: ${{ env.MVN_CACHE_FOLDER }}
          key: ${{ hashFiles('pom.xml') }}
      - run: npx cdk deploy --app "./mvnw -Dmaven.repo.local=$MVN_CACHE_FOLDER -e -q clean compile exec:java -U" --require-approval never